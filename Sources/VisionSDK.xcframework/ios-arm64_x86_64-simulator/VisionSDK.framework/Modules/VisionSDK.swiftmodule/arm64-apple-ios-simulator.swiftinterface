// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name VisionSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import Accelerate
import Combine
import CommonCrypto
import Compression
import CoreFoundation
import CoreImage
import CoreML
import CryptoKit
import Darwin
import DeveloperToolsSupport
import Foundation
import MachO
import ObjectiveC
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import Vision
import VisionKit
@_exported import VisionSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
import zlib
@_inheritsConvenienceInitializers @objc(VSDKAnalyticsReportModel) public class VSDKAnalyticsReportModel : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SLReportModel) public class SLReportModel : VisionSDK.VSDKAnalyticsReportModel {
  public var isTrackingNoWrong: Swift.Bool
  public var isCourierNameWrong: Swift.Bool
  public var isWeightWrong: Swift.Bool
  public var isDimensionsValueWrong: Swift.Bool
  public var isReceiverNameWrong: Swift.Bool
  public var isReceiverAddressWrong: Swift.Bool
  public var isSenderNameWrong: Swift.Bool
  public var isSenderAddressWrong: Swift.Bool
  @objc override dynamic public init()
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BOLReportModel) public class BOLReportModel : VisionSDK.VSDKAnalyticsReportModel {
  public var isReferenceNoWrong: Swift.Bool
  public var isLoadNumberWrong: Swift.Bool
  public var isPurchaseOrderNumberWrong: Swift.Bool
  public var isInvoiceNumberWrong: Swift.Bool
  public var isCustomerPurchaseOrderNumberWrong: Swift.Bool
  public var isOrderNumberWrong: Swift.Bool
  public var isBillOfLadingWrong: Swift.Bool
  public var isMasterBillOfLadingWrong: Swift.Bool
  public var isLineBillOfLadingWrong: Swift.Bool
  public var isHouseBillOfLadingWrong: Swift.Bool
  public var isShippingIdWrong: Swift.Bool
  public var isShippingDateWrong: Swift.Bool
  public var isDateWrong: Swift.Bool
  @objc override dynamic public init()
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ILReportModel) public class ILReportModel : VisionSDK.VSDKAnalyticsReportModel {
  public var isSupplierNameWrong: Swift.Bool
  public var isItemNameWrong: Swift.Bool
  public var isItemSKUWrong: Swift.Bool
  public var isWeightWrong: Swift.Bool
  public var isQuantityWrong: Swift.Bool
  public var isDimensionsValueWrong: Swift.Bool
  public var isProductionDateWrong: Swift.Bool
  public var isSupplierAddressWrong: Swift.Bool
  @objc override dynamic public init()
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DCReportModel) public class DCReportModel : VisionSDK.VSDKAnalyticsReportModel {
  public var isDocumentClassWrong: Swift.Bool
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(OnDeviceOCRManager) public class OnDeviceOCRManager : ObjectiveC.NSObject {
  @objc public static let shared: VisionSDK.OnDeviceOCRManager
  @objc public func getVSDKLogs() -> Foundation.URL?
  @objc public func reportErrorWith(_ apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, forModelClass modelClass: VisionSDK.VSDKModelExternalClass, withModelSize modelSize: VisionSDK.VSDKModelExternalSize = .micro, image: CoreImage.CIImage?, reportText: Swift.String, response: Foundation.Data?, reportModel: VisionSDK.VSDKAnalyticsReportModel?, withCompletion completion: ((_ response: Swift.Int) -> ())?)
  @objc public func prepareOfflineOCR(withApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, forModelClass modelClass: VisionSDK.VSDKModelExternalClass, withProgressTracking progress: ((_ currentProgress: Swift.Float, _ totalSize: Swift.Float, _ isModelAlreadyDownloaded: Swift.Bool) -> ())?, withCompletion completion: ((_ error: Foundation.NSError?) -> ())?)
  @objc public func prepareOfflineOCR(withApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, forModelClass modelClass: VisionSDK.VSDKModelExternalClass, withModelSize modelSize: VisionSDK.VSDKModelExternalSize = .micro, withProgressTracking progress: ((_ currentProgress: Swift.Float, _ totalSize: Swift.Float, _ isModelAlreadyDownloaded: Swift.Bool) -> ())?, withCompletion completion: ((_ error: Foundation.NSError?) -> ())?)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @objc public func extractDataFromImage(_ image: CoreImage.CIImage, withBarcodes barcodes: [Swift.String], _ completion: @escaping (Foundation.Data?, Foundation.NSError?) -> Swift.Void)
  @objc public func extractDataFromImageUsing(_ image: CoreImage.CIImage, withBarcodes barcodes: [VisionSDK.DetectedBarcode], _ completion: @escaping (Foundation.Data?, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
public enum InterpreterError : Swift.Error, Swift.Equatable, Swift.Hashable {
  case invalidTensorIndex(index: Swift.Int, maxIndex: Swift.Int)
  case invalidTensorDataCount(provided: Swift.Int, required: Swift.Int)
  case invalidTensorDataType
  case failedToLoadModel
  case failedToCreateInterpreter
  case failedToResizeInputTensor(index: Swift.Int)
  case failedToCopyDataToInputTensor
  case failedToAllocateTensors
  case allocateTensorsRequired
  case invokeInterpreterRequired
  case tensorFlowLiteError(Swift.String)
  public static func == (a: VisionSDK.InterpreterError, b: VisionSDK.InterpreterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VisionSDK.InterpreterError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VisionSDK.InterpreterError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public enum CodeScannerError : Swift.Int {
  case cameraUsageNotAuthorized = 0
  case noTextDetected = 1
  case noBarCodeDetected = 2
  case noQRCodeDetected = 3
  case noBarCodeORQRCodeDetected = 4
  case noDocumentDetected = 5
  case videoUnavailable = 6
  case authenticationNeededForPriceTagScanning = 7
  case priceTagDelegateNotImplemented = 8
  case templateNotFound = 9
  case noTemplateCodesFound = 10
  case itemRetrievalDelegateNotImplemented = 11
  case authenticationNeededForItemRetrievalScanning = 12
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CodeScannerMode : Swift.Int {
  case barCode
  case qrCode
  case autoBarCodeOrQRCode
  case ocr
  case photo
  case priceTag
  case itemRetrieval
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum OCRMode : Swift.Int {
  case online
  case offline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CaptureType : Swift.Int {
  case single
  case multiple
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CameraPosition : Swift.Int {
  case back = 1
  case front = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CaptureMode : Swift.Int {
  case auto
  case manual
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BarcodeSymbology : Swift.Int {
  case aztec
  case codabar
  case code128
  case code39
  case code39Checksum
  case code39FullASCII
  case code39FullASCIIChecksum
  case code93
  case code93i
  case dataMatrix
  case ean13
  case ean8
  case gs1DataBar
  case gs1DataBarExpanded
  case gs1DataBarLimited
  case I2of5
  case I2of5Checksum
  case itf14
  case msiPlessey
  case microPDF417
  case microQR
  case pdf417
  case qr
  case upce
  case unknown
  public func stringValue() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(CodeScannerViewDelegate) public protocol CodeScannerViewDelegate {
  @objc func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didFailure error: Foundation.NSError)
  @objc func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didSuccess codes: [VisionSDK.DetectedBarcode])
  @objc optional func codeScannerViewDidDetectBoxes(_ text: Swift.Bool, barCode: [CoreFoundation.CGRect], qrCode: [CoreFoundation.CGRect], document: CoreFoundation.CGRect)
  @objc func codeScannerViewDidDetect(_ text: Swift.Bool, barCode: Swift.Bool, qrCode: Swift.Bool, document: Swift.Bool)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @objc optional func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didCaptureOCRImage image: UIKit.UIImage, withCroppedImge croppedImage: UIKit.UIImage?, withbarCodes barcodes: [Swift.String])
  @objc optional func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didCaptureOCRImage image: UIKit.UIImage, withCroppedImge croppedImage: UIKit.UIImage?, withBarcodes barcodes: [VisionSDK.DetectedBarcode])
  @objc optional func codeScannerViewDidCapturePrice(_ price: Swift.String, withSKU sKU: Swift.String, withBoundingBox boundingBox: CoreFoundation.CGRect) -> Swift.Bool
  @objc optional func codeScannerViewDidCaptureItemCodesWith(_ codes: [VisionSDK.DetectedBarcode]) -> [Swift.String : Swift.Bool]
}
extension VisionSDK.CodeScannerViewDelegate {
  public func codeScannerViewDidDetect(_ text: Swift.Bool, barCode: Swift.Bool, qrCode: Swift.Bool, document: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(CodeScannerView) @_Concurrency.MainActor @preconcurrency public class CodeScannerView : UIKit.UIView {
  @objc(FocusSettings) public class FocusSettings : ObjectiveC.NSObject {
    public var focusImage: UIKit.UIImage?
    public var focusImageRect: CoreFoundation.CGRect
    public var shouldDisplayFocusImage: Swift.Bool
    public var shouldScanInFocusImageRect: Swift.Bool
    public var showCodeBoundariesInMultipleScan: Swift.Bool
    public var validCodeBoundryBorderColor: UIKit.UIColor
    public var validCodeBoundryBorderWidth: CoreFoundation.CGFloat
    public var validCodeBoundryFillColor: UIKit.UIColor
    public var inValidCodeBoundryBorderColor: UIKit.UIColor
    public var inValidCodeBoundryBorderWidth: CoreFoundation.CGFloat
    public var inValidCodeBoundryFillColor: UIKit.UIColor
    public var showDocumentBoundries: Swift.Bool
    public var documentBoundryBorderColor: UIKit.UIColor
    public var documentBoundryBorderWidth: CoreFoundation.CGFloat
    public var documentBoundryFillColor: UIKit.UIColor
    public var focusImageTintColor: UIKit.UIColor
    public var focusImageHighlightedColor: UIKit.UIColor
    @objc public static var `default`: VisionSDK.CodeScannerView.FocusSettings {
      @objc get
    }
    @objc public init(focusImage: UIKit.UIImage? = nil, focusImageRect: CoreFoundation.CGRect = .zero, shouldDisplayFocusImage: Swift.Bool = true, shouldScanInFocusImageRect: Swift.Bool = true, showCodeBoundariesInMultipleScan: Swift.Bool = true, validCodeBoundryBorderColor: UIKit.UIColor = .green, validCodeBoundryBorderWidth: CoreFoundation.CGFloat = 1.0, validCodeBoundryFillColor: UIKit.UIColor = .green.withAlphaComponent(0.3), inValidCodeBoundryBorderColor: UIKit.UIColor = .red, inValidCodeBoundryBorderWidth: CoreFoundation.CGFloat = 1.0, inValidCodeBoundryFillColor: UIKit.UIColor = .red.withAlphaComponent(0.3), showDocumentBoundries: Swift.Bool = true, documentBoundryBorderColor: UIKit.UIColor = .orange, documentBoundryBorderWidth: CoreFoundation.CGFloat = 1.0, documentBoundryFillColor: UIKit.UIColor = .orange.withAlphaComponent(0.3), focusImageTintColor: UIKit.UIColor = .white, focusImageHighlightedColor: UIKit.UIColor = .white)
    @objc deinit
  }
  @objc(ObjectDetectionConfiguration) public class ObjectDetectionConfiguration : ObjectiveC.NSObject {
    public var isTextIndicationOn: Swift.Bool
    public var isBarCodeOrQRCodeIndicationOn: Swift.Bool
    public var isDocumentIndicationOn: Swift.Bool
    public var codeDetectionConfidence: Swift.Float
    public var documentDetectionConfidence: Swift.Float
    public var secondsToWaitBeforeDocumentCapture: Swift.Double
    public var selectedTemplateId: Swift.String?
    @objc public static var `default`: VisionSDK.CodeScannerView.ObjectDetectionConfiguration {
      @objc get
    }
    @objc public init(isTextIndicationOn: Swift.Bool = true, isBarCodeOrQRCodeIndicationOn: Swift.Bool = true, isDocumentIndicationOn: Swift.Bool = true, codeDetectionConfidence: Swift.Float = 0.5, documentDetectionConfidence: Swift.Float = 0.9, secondsToWaitBeforeDocumentCapture: Swift.Double = 3.0, selectedTemplateId: Swift.String? = nil)
    @objc deinit
  }
  @objc(CameraSettings) public class CameraSettings : ObjectiveC.NSObject {
    public var nthFrameToProcess: Swift.Int64
    public var cameraPosition: VisionSDK.CameraPosition
    @objc public static var `default`: VisionSDK.CodeScannerView.CameraSettings {
      @objc get
    }
    @objc public init(nthFrameToProcess: Swift.Int64 = 10, cameraPosition: VisionSDK.CameraPosition = .back)
    @objc deinit
  }
  @objc(PriceTagDetectionSettings) public class PriceTagDetectionSettings : ObjectiveC.NSObject {
    public var shouldDisplayOnScreenIndicators: Swift.Bool
    public var validTagImage: UIKit.UIImage
    public var invalidTagImage: UIKit.UIImage
    @objc public static var `default`: VisionSDK.CodeScannerView.PriceTagDetectionSettings {
      @objc get
    }
    @objc public init(shouldDisplayOnScreenIndicators: Swift.Bool = true, validTagImage: UIKit.UIImage = UIImage(named: "vsdkValidTag", in: Bundle(for: CodeScannerView.self), compatibleWith: nil)!, invalidTagImage: UIKit.UIImage = UIImage(named: "vsdkInvalidTag", in: Bundle(for: CodeScannerView.self), compatibleWith: nil)!)
    @objc deinit
  }
  @_Concurrency.MainActor @preconcurrency public var focusSettings: VisionSDK.CodeScannerView.FocusSettings {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var objectDetectionConfiguration: VisionSDK.CodeScannerView.ObjectDetectionConfiguration {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var cameraSettings: VisionSDK.CodeScannerView.CameraSettings {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var priceTagDetectionSettings: VisionSDK.CodeScannerView.PriceTagDetectionSettings {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var sessionPreset: AVFoundation.AVCaptureSession.Preset {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var captureMode: VisionSDK.CaptureMode {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var captureType: VisionSDK.CaptureType {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var scanMode: VisionSDK.CodeScannerMode {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var videoDevice: AVFoundation.AVCaptureDevice {
    get throws
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VisionSDK.CodeScannerView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func configure(delegate: any VisionSDK.CodeScannerViewDelegate, sessionPreset: AVFoundation.AVCaptureSession.Preset = .high, captureMode: VisionSDK.CaptureMode = .auto, captureType: VisionSDK.CaptureType = .single, scanMode: VisionSDK.CodeScannerMode = .qrCode)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setScanModeTo(_ mode: VisionSDK.CodeScannerMode)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setCaptureModeTo(_ mode: VisionSDK.CaptureMode)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setCaptureTypeTo(_ type: VisionSDK.CaptureType)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setFocusSettingsTo(_ focusSettings: VisionSDK.CodeScannerView.FocusSettings)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setObjectDetectionConfigurationTo(_ objectDetectionConfiguration: VisionSDK.CodeScannerView.ObjectDetectionConfiguration)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setCameraSettingsTo(_ cameraSettings: VisionSDK.CodeScannerView.CameraSettings)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setPriceTagDetectionSettingsTo(_ priceTagDetectionSettings: VisionSDK.CodeScannerView.PriceTagDetectionSettings)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setSessionPresetTo(_ sessionPreset: AVFoundation.AVCaptureSession.Preset)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func capturePhoto()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func startRunning()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func stopRunning()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func rescan()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func deConfigure()
  @_Concurrency.MainActor @preconcurrency public func exifOrientationFromDeviceOrientation() -> ImageIO.CGImagePropertyOrientation
  @objc @_Concurrency.MainActor @preconcurrency public static func getAllTemplates() -> [Swift.String]
  @objc @_Concurrency.MainActor @preconcurrency public static func deleteTemplateWithId(_ id: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public static func deleteAllTemplates()
}
extension VisionSDK.CodeScannerView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension VisionSDK.CodeScannerView : AVFoundation.AVCapturePhotoCaptureDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
}
extension AVFoundation.AVCaptureDevice {
  public func set(frameRate: Swift.Double)
}
@objc(DetectedBarcode) final public class DetectedBarcode : ObjectiveC.NSObject {
  @objc final public let stringValue: Swift.String
  @objc final public let symbology: VisionSDK.BarcodeSymbology
  @objc final public let extractedData: [Swift.String : Swift.String]?
  @objc final public let boundingBox: CoreFoundation.CGRect
  public init(stringValue: Swift.String, symbology: VisionSDK.BarcodeSymbology, extractedData: [Swift.String : Swift.String]? = nil, boundingBox: CoreFoundation.CGRect = .zero)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(VisionAPIManager) public class VisionAPIManager : ObjectiveC.NSObject {
  @objc public static let shared: VisionSDK.VisionAPIManager
  @objc deinit
}
extension VisionSDK.VisionAPIManager {
  @objc dynamic public func checkScanningFeatureAuthenticationWithKey(_ apiKey: Swift.String? = nil, andToken token: Swift.String? = nil) async -> Foundation.NSError?
  @objc dynamic public func callScanAPIWith(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], andApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, andLocationId locationId: Swift.String? = nil, andOptions options: [Swift.String : Any], andMetaData metaData: [Swift.String : Any] = [:], andRecipient recipient: [Swift.String : Any]? = nil, andSender sender: [Swift.String : Any]? = nil, withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping (_ data: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func getPredictionBillOfLadingCloud(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], andApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, andLocationId locationId: Swift.String? = nil, andOptions options: [Swift.String : Any] = [:], withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping (_ data: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func callDocumentClassificationAPIWith(_ image: UIKit.UIImage, andApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping (_ data: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func callItemLabelsAPIWith(_ image: UIKit.UIImage, andApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping (_ data: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func callMatchingAPIWith(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], andApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, withResponseData responseData: Foundation.Data, andLocationId locationId: Swift.String? = nil, andOptions options: [Swift.String : Any], andMetaData metaData: [Swift.String : Any] = [:], andRecipient recipient: [Swift.String : Any]? = nil, andSender sender: [Swift.String : Any]? = nil, withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping (_ data: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func callItemLabelsMatchingAPIWith(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], andApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, withResponseData responseData: Foundation.Data, withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping (_ data: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func callVLMCloudAPIWith(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], withImageResizing shouldResizeImage: Swift.Bool = false, _ completion: @escaping (_ data: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void)
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
  public static let updateArticles: Foundation.Notification.Name
  public static let pushNotificationReceived: Foundation.Notification.Name
}
public class Connectivity {
  public typealias NetworkReachable = (VisionSDK.Connectivity) -> ()
  public typealias NetworkUnreachable = (VisionSDK.Connectivity) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: VisionSDK.Connectivity.NetworkStatus, b: VisionSDK.Connectivity.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: VisionSDK.Connectivity.Connection, b: VisionSDK.Connectivity.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: VisionSDK.Connectivity.NetworkReachable?
  public var whenUnreachable: VisionSDK.Connectivity.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: VisionSDK.Connectivity.Connection {
    get
  }
  public var connection: VisionSDK.Connectivity.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, usingHostname: Swift.Bool = false)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension VisionSDK.Connectivity {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc public enum VSDKModelExternalClass : Swift.Int {
  case shippingLabel
  case billOfLading
  case itemLabel
  case documentClassification
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VSDKModelExternalSize : Swift.Int {
  case nano
  case micro
  case small
  case medium
  case large
  case xlarge
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VSDKAppEnvironment : Swift.Int {
  case dev
  case qa
  case staging
  case production
  case sandbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(Constants) public class VSDKConstants : ObjectiveC.NSObject {
  public static var apiKey: Swift.String
  public static var apiEnvironment: VisionSDK.VSDKAppEnvironment
  public static var modelUrl: Foundation.URL!
  @objc override dynamic public init()
  @objc deinit
}
@objc(GenerateTemplateControllerDelegate) public protocol GenerateTemplateControllerDelegate {
  @objc func templateScanController(_ controller: VisionSDK.GenerateTemplateController, didFinishWith result: Swift.String)
  @objc func templateScanController(_ controller: VisionSDK.GenerateTemplateController, didFailWithError error: any Swift.Error)
  @objc func templateScanControllerDidCancel(_ controller: VisionSDK.GenerateTemplateController)
}
@_inheritsConvenienceInitializers @objc(GenerateTemplateController) @_Concurrency.MainActor @preconcurrency public class GenerateTemplateController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any VisionSDK.GenerateTemplateControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public static func instantiate() -> VisionSDK.GenerateTemplateController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VisionSDK.GenerateTemplateController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func startRunning()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func stopRunning()
}
extension VisionSDK.GenerateTemplateController : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension VisionSDK.CodeScannerError : Swift.Equatable {}
extension VisionSDK.CodeScannerError : Swift.Hashable {}
extension VisionSDK.CodeScannerError : Swift.RawRepresentable {}
extension VisionSDK.CodeScannerMode : Swift.Equatable {}
extension VisionSDK.CodeScannerMode : Swift.Hashable {}
extension VisionSDK.CodeScannerMode : Swift.RawRepresentable {}
extension VisionSDK.OCRMode : Swift.Equatable {}
extension VisionSDK.OCRMode : Swift.Hashable {}
extension VisionSDK.OCRMode : Swift.RawRepresentable {}
extension VisionSDK.CaptureType : Swift.Equatable {}
extension VisionSDK.CaptureType : Swift.Hashable {}
extension VisionSDK.CaptureType : Swift.RawRepresentable {}
extension VisionSDK.CameraPosition : Swift.Equatable {}
extension VisionSDK.CameraPosition : Swift.Hashable {}
extension VisionSDK.CameraPosition : Swift.RawRepresentable {}
extension VisionSDK.CaptureMode : Swift.Equatable {}
extension VisionSDK.CaptureMode : Swift.Hashable {}
extension VisionSDK.CaptureMode : Swift.RawRepresentable {}
extension VisionSDK.BarcodeSymbology : Swift.Equatable {}
extension VisionSDK.BarcodeSymbology : Swift.Hashable {}
extension VisionSDK.BarcodeSymbology : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension VisionSDK.Connectivity.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension VisionSDK.Connectivity.NetworkStatus : Swift.Hashable {}
extension VisionSDK.Connectivity.Connection : Swift.Equatable {}
extension VisionSDK.Connectivity.Connection : Swift.Hashable {}
extension VisionSDK.VSDKModelExternalClass : Swift.Equatable {}
extension VisionSDK.VSDKModelExternalClass : Swift.Hashable {}
extension VisionSDK.VSDKModelExternalClass : Swift.RawRepresentable {}
extension VisionSDK.VSDKModelExternalSize : Swift.Equatable {}
extension VisionSDK.VSDKModelExternalSize : Swift.Hashable {}
extension VisionSDK.VSDKModelExternalSize : Swift.RawRepresentable {}
extension VisionSDK.VSDKAppEnvironment : Swift.Equatable {}
extension VisionSDK.VSDKAppEnvironment : Swift.Hashable {}
extension VisionSDK.VSDKAppEnvironment : Swift.RawRepresentable {}
