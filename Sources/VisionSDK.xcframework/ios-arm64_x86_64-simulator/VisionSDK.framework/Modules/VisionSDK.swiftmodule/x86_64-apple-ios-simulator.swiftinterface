// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VisionSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
import Swift
import SwiftUI
import UIKit
import Vision
import VisionKit
@_exported import VisionSDK
import _Concurrency
import _StringProcessing
@objc public enum CodeScannerError : Swift.Int {
  case unauthorized
  case noTextDetected
  case noBarCodeDetected
  case noQRCodeDetected
  case noBarCodeORQRCodeDetected
  case readFailure
  case unknowns
  case videoUnavailable
  case inputInvalid
  case metadataOutputFailure
  case videoDataOutputFailure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CodeScannerMode : Swift.Int {
  case barCode
  case qrCode
  case ocr
  case autoBarCodeOrQRCode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum OCRMode : Swift.Int {
  case online
  case offline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CaptureType : Swift.Int {
  case single
  case multiple
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CaptureMode : Swift.Int {
  case auto
  case manual
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(CodeScannerViewDelegate) public protocol CodeScannerViewDelegate {
  @objc func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didFailure error: VisionSDK.CodeScannerError)
  @objc func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didSuccess codes: [Swift.String])
  @objc func codeScannerViewDidDetect(_ text: Swift.Bool, barCode: Swift.Bool, qrCode: Swift.Bool)
  @objc func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didCaptureOCRImage image: UIKit.UIImage, withCroppedImge croppedImage: UIKit.UIImage?, withbarCodes barcodes: [Swift.String])
}
extension VisionSDK.CodeScannerViewDelegate {
  public func codeScannerViewDidDetect(_ text: Swift.Bool, barCode: Swift.Bool, qrCode: Swift.Bool)
  public func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didCaptureOCRImage image: UIKit.UIImage, withCroppedImge croppedImage: UIKit.UIImage?, withbarCodes barcodes: [Swift.String])
}
@_inheritsConvenienceInitializers @objc(CodeScannerView) @_Concurrency.MainActor(unsafe) public class CodeScannerView : UIKit.UIView {
  @objc(Input) public class Input : ObjectiveC.NSObject {
    @objc public static var `default`: VisionSDK.CodeScannerView.Input {
      @objc get
    }
    @objc public init(focusImage: UIKit.UIImage? = nil, focusImageRect: CoreFoundation.CGRect = .zero, shouldDisplayFocusImage: Swift.Bool = true, shouldScanInFocusImageRect: Swift.Bool = true, imageTintColor: UIKit.UIColor = .white, selectionTintColor: UIKit.UIColor = .white, isTextIndicationOn: Swift.Bool = true, isBarCodeOrQRCodeIndicationOn: Swift.Bool = true, sessionPreset: AVFoundation.AVCaptureSession.Preset? = .high, nthFrameToProcess: Swift.Int64 = 10, captureMode: VisionSDK.CaptureMode, captureType: VisionSDK.CaptureType, codeDetectionConfidence: Swift.Float = 0.5)
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) public var isTextIndicationOn: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isBarCodeOrQRCodeIndicationOn: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var shouldScanInFocusImageRect: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var shouldDisplayFocusImage: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var sessionPreset: AVFoundation.AVCaptureSession.Preset
  @_Concurrency.MainActor(unsafe) public var nthFrameToProcess: Swift.Int64
  @_Concurrency.MainActor(unsafe) public var captureMode: VisionSDK.CaptureMode
  @_Concurrency.MainActor(unsafe) public var captureType: VisionSDK.CaptureType
  @_Concurrency.MainActor(unsafe) public var codeDetectionConfidence: Swift.Float
  @_Concurrency.MainActor(unsafe) public var focusImage: UIKit.UIImage? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var focusImageRect: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor(unsafe) public var scanMode: VisionSDK.CodeScannerMode {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var videoDevice: AVFoundation.AVCaptureDevice {
    get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VisionSDK.CodeScannerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func configure(delegate: any VisionSDK.CodeScannerViewDelegate, input: VisionSDK.CodeScannerView.Input = .default, scanMode: VisionSDK.CodeScannerMode = .qrCode)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setScanModeTo(_ mode: VisionSDK.CodeScannerMode)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setCaptureModeTo(_ mode: VisionSDK.CaptureMode)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setCaptureTypeTo(_ type: VisionSDK.CaptureType)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func capturePhoto()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func startRunning()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func stopRunning()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func rescan()
  @_Concurrency.MainActor(unsafe) public func exifOrientationFromDeviceOrientation() -> ImageIO.CGImagePropertyOrientation
}
extension VisionSDK.CodeScannerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func deConfigure()
}
extension VisionSDK.CodeScannerView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension VisionSDK.CodeScannerView : AVFoundation.AVCapturePhotoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
}
extension AVFoundation.AVCaptureDevice {
  public func set(frameRate: Swift.Double)
}
extension Swift.String {
  public func search(_ inString: Swift.String, at groupNumber: Swift.Int = 0, name groupName: Swift.String? = nil) -> Swift.String?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(VisionAPIManager) public class VisionAPIManager : ObjectiveC.NSObject {
  @objc public static let shared: VisionSDK.VisionAPIManager
  @objc deinit
}
extension VisionSDK.VisionAPIManager {
  @objc dynamic public func callScanAPIWith(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], andApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, andLocationId locationId: Swift.String? = nil, andOptions options: [Swift.String : Swift.String], withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void))
  @objc dynamic public func callManifestAPIWith(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], andApiKey apiKey: Swift.String? = nil, withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void))
}
@objc public enum AppEnvironment : Swift.Int {
  case dev
  case qa
  case staging
  case production
  case sandbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(Constants) public class Constants : ObjectiveC.NSObject {
  public static var apiKey: Swift.String
  public static var apiEnvironment: VisionSDK.AppEnvironment
  @objc override dynamic public init()
  @objc deinit
}
extension VisionSDK.CodeScannerError : Swift.Equatable {}
extension VisionSDK.CodeScannerError : Swift.Hashable {}
extension VisionSDK.CodeScannerError : Swift.RawRepresentable {}
extension VisionSDK.CodeScannerMode : Swift.Equatable {}
extension VisionSDK.CodeScannerMode : Swift.Hashable {}
extension VisionSDK.CodeScannerMode : Swift.RawRepresentable {}
extension VisionSDK.OCRMode : Swift.Equatable {}
extension VisionSDK.OCRMode : Swift.Hashable {}
extension VisionSDK.OCRMode : Swift.RawRepresentable {}
extension VisionSDK.CaptureType : Swift.Equatable {}
extension VisionSDK.CaptureType : Swift.Hashable {}
extension VisionSDK.CaptureType : Swift.RawRepresentable {}
extension VisionSDK.CaptureMode : Swift.Equatable {}
extension VisionSDK.CaptureMode : Swift.Hashable {}
extension VisionSDK.CaptureMode : Swift.RawRepresentable {}
extension VisionSDK.AppEnvironment : Swift.Equatable {}
extension VisionSDK.AppEnvironment : Swift.Hashable {}
extension VisionSDK.AppEnvironment : Swift.RawRepresentable {}
