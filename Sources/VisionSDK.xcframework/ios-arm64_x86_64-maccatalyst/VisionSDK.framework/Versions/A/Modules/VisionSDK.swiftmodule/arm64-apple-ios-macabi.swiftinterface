// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VisionSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AppKit
import CoreML
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import Vision
import VisionKit
@_exported import VisionSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum CodeScannerError : Swift.Int {
  case cameraUsageNotAuthorized
  case noTextDetected
  case noBarCodeDetected
  case noQRCodeDetected
  case noBarCodeORQRCodeDetected
  case noDocumentDetected
  case readFailure
  case unknowns
  case videoUnavailable
  case inputInvalid
  case metadataOutputFailure
  case videoDataOutputFailure
  case authenticationNeededForPriceTagScanning
  case priceTagDelegateNotImplemented
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CodeScannerMode : Swift.Int {
  case barCode
  case qrCode
  case autoBarCodeOrQRCode
  case ocr
  case photo
  case priceTag
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum OCRMode : Swift.Int {
  case online
  case offline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CaptureType : Swift.Int {
  case single
  case multiple
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CaptureMode : Swift.Int {
  case auto
  case manual
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(CodeScannerViewDelegate) public protocol CodeScannerViewDelegate {
  @objc func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didFailure error: VisionSDK.CodeScannerError)
  @objc func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didSuccess codes: [Swift.String])
  @objc func codeScannerViewDidDetect(_ text: Swift.Bool, barCode: Swift.Bool, qrCode: Swift.Bool, document: Swift.Bool)
  @objc func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didCaptureOCRImage image: UIKit.UIImage, withCroppedImge croppedImage: UIKit.UIImage?, withbarCodes barcodes: [Swift.String], savedImageURL: Foundation.URL?)
  @objc optional func codeScannerViewDidCapturePrice(_ price: Swift.String, withSKU sKU: Swift.String) -> Swift.Bool
}
extension VisionSDK.CodeScannerViewDelegate {
  public func codeScannerViewDidDetect(_ text: Swift.Bool, barCode: Swift.Bool, qrCode: Swift.Bool, document: Swift.Bool)
  public func codeScannerView(_ scannerView: VisionSDK.CodeScannerView, didCaptureOCRImage image: UIKit.UIImage, withCroppedImge croppedImage: UIKit.UIImage?, withbarCodes barcodes: [Swift.String], savedImageURL: Foundation.URL?)
}
@_inheritsConvenienceInitializers @objc(CodeScannerView) @_Concurrency.MainActor(unsafe) public class CodeScannerView : UIKit.UIView {
  @objc(FocusSettings) public class FocusSettings : ObjectiveC.NSObject {
    public var focusImage: UIKit.UIImage?
    public var focusImageRect: CoreFoundation.CGRect
    public var shouldDisplayFocusImage: Swift.Bool
    public var shouldScanInFocusImageRect: Swift.Bool
    public var showDocumentBoundries: Swift.Bool
    public var documentBoundryBorderColor: UIKit.UIColor
    public var documentBoundryFillColor: UIKit.UIColor
    public var focusImageTintColor: UIKit.UIColor
    public var focusImageHighlightedColor: UIKit.UIColor
    @objc public static var `default`: VisionSDK.CodeScannerView.FocusSettings {
      @objc get
    }
    @objc public init(focusImage: UIKit.UIImage? = nil, focusImageRect: CoreFoundation.CGRect = .zero, shouldDisplayFocusImage: Swift.Bool = true, shouldScanInFocusImageRect: Swift.Bool = true, showDocumentBoundries: Swift.Bool = true, documentBoundryBorderColor: UIKit.UIColor = .orange, documentBoundryFillColor: UIKit.UIColor = .orange.withAlphaComponent(0.3), focusImageTintColor: UIKit.UIColor = .white, focusImageHighlightedColor: UIKit.UIColor = .white)
    @objc deinit
  }
  @objc(ObjectDetectionConfiguration) public class ObjectDetectionConfiguration : ObjectiveC.NSObject {
    public var isTextIndicationOn: Swift.Bool
    public var isBarCodeOrQRCodeIndicationOn: Swift.Bool
    public var isDocumentIndicationOn: Swift.Bool
    public var codeDetectionConfidence: Swift.Float
    public var documentDetectionConfidence: Swift.Float
    public var secondsToWaitBeforeDocumentCapture: Swift.Double
    @objc public static var `default`: VisionSDK.CodeScannerView.ObjectDetectionConfiguration {
      @objc get
    }
    @objc public init(isTextIndicationOn: Swift.Bool = true, isBarCodeOrQRCodeIndicationOn: Swift.Bool = true, isDocumentIndicationOn: Swift.Bool = true, codeDetectionConfidence: Swift.Float = 0.5, documentDetectionConfidence: Swift.Float = 0.9, secondsToWaitBeforeDocumentCapture: Swift.Double = 3.0)
    @objc deinit
  }
  @objc(CameraSettings) public class CameraSettings : ObjectiveC.NSObject {
    public var sessionPreset: AVFoundation.AVCaptureSession.Preset
    public var nthFrameToProcess: Swift.Int64
    public var shouldAutoSaveCapturedImage: Swift.Bool
    @objc public static var `default`: VisionSDK.CodeScannerView.CameraSettings {
      @objc get
    }
    @objc public init(sessionPreset: AVFoundation.AVCaptureSession.Preset = .high, nthFrameToProcess: Swift.Int64 = 10, shouldAutoSaveCapturedImage: Swift.Bool = false)
    @objc deinit
  }
  @objc(PriceTagDetectionSettings) public class PriceTagDetectionSettings : ObjectiveC.NSObject {
    public var shouldDisplayOnScreenIndicators: Swift.Bool
    public var validTagImage: UIKit.UIImage
    public var invalidTagImage: UIKit.UIImage
    @objc public static var `default`: VisionSDK.CodeScannerView.PriceTagDetectionSettings {
      @objc get
    }
    @objc public init(shouldDisplayOnScreenIndicators: Swift.Bool = true, validTagImage: UIKit.UIImage = UIImage(named: "vsdkValidTag", in: Bundle(for: CodeScannerView.self), compatibleWith: nil)!, invalidTagImage: UIKit.UIImage = UIImage(named: "vsdkInvalidTag", in: Bundle(for: CodeScannerView.self), compatibleWith: nil)!)
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) public var focusSettings: VisionSDK.CodeScannerView.FocusSettings
  @_Concurrency.MainActor(unsafe) public var objectDetectionConfiguration: VisionSDK.CodeScannerView.ObjectDetectionConfiguration
  @_Concurrency.MainActor(unsafe) public var cameraSettings: VisionSDK.CodeScannerView.CameraSettings
  @_Concurrency.MainActor(unsafe) public var priceTagDetectionSettings: VisionSDK.CodeScannerView.PriceTagDetectionSettings
  @_Concurrency.MainActor(unsafe) public var captureMode: VisionSDK.CaptureMode
  @_Concurrency.MainActor(unsafe) public var captureType: VisionSDK.CaptureType
  @_Concurrency.MainActor(unsafe) public var scanMode: VisionSDK.CodeScannerMode {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var videoDevice: AVFoundation.AVCaptureDevice {
    get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VisionSDK.CodeScannerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func configure(delegate: any VisionSDK.CodeScannerViewDelegate, focusSettings: VisionSDK.CodeScannerView.FocusSettings = .default, objectDetectionConfiguration: VisionSDK.CodeScannerView.ObjectDetectionConfiguration = .default, cameraSettings: VisionSDK.CodeScannerView.CameraSettings = .default, captureMode: VisionSDK.CaptureMode = .auto, captureType: VisionSDK.CaptureType = .single, scanMode: VisionSDK.CodeScannerMode = .qrCode)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setScanModeTo(_ mode: VisionSDK.CodeScannerMode)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setCaptureModeTo(_ mode: VisionSDK.CaptureMode)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setCaptureTypeTo(_ type: VisionSDK.CaptureType)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func capturePhoto()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func startRunning()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func stopRunning()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func rescan()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func deConfigure()
  @_Concurrency.MainActor(unsafe) public func exifOrientationFromDeviceOrientation() -> ImageIO.CGImagePropertyOrientation
  @objc @_Concurrency.MainActor(unsafe) dynamic public func saveImageToVisionSDK(image: UIKit.UIImage, withName imageName: Swift.String) -> Foundation.URL?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeAllSavedImages()
}
extension VisionSDK.CodeScannerView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension VisionSDK.CodeScannerView : AVFoundation.AVCapturePhotoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
}
extension VisionSDK.CodeScannerView {
  @_Concurrency.MainActor(unsafe) public func detectPriceLabelFromBuffer(_ buffer: CoreVideo.CVImageBuffer)
}
extension AVFoundation.AVCaptureDevice {
  public func set(frameRate: Swift.Double)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(VisionAPIManager) public class VisionAPIManager : ObjectiveC.NSObject {
  @objc public static let shared: VisionSDK.VisionAPIManager
  @objc public func checkPriceTagAuthenticationWithKey(_ apiKey: Swift.String?, _ completion: @escaping ((_ error: Foundation.NSError?) -> Swift.Void))
  @objc deinit
}
extension VisionSDK.VisionAPIManager {
  @objc dynamic public func callScanAPIWith(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], andApiKey apiKey: Swift.String? = nil, andToken token: Swift.String? = nil, andLocationId locationId: Swift.String? = nil, andOptions options: [Swift.String : Any], andMetaData metaData: [Swift.String : Any] = [:], withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void))
  @objc dynamic public func callManifestAPIWith(_ image: UIKit.UIImage, andBarcodes barcodes: [Swift.String], andApiKey apiKey: Swift.String? = nil, withImageResizing shouldResizeImage: Swift.Bool = true, _ completion: @escaping ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void))
}
@objc public enum AppEnvironment : Swift.Int {
  case dev
  case qa
  case staging
  case production
  case sandbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(Constants) public class Constants : ObjectiveC.NSObject {
  public static var apiKey: Swift.String
  public static var apiEnvironment: VisionSDK.AppEnvironment
  @objc override dynamic public init()
  @objc deinit
}
extension VisionSDK.CodeScannerError : Swift.Equatable {}
extension VisionSDK.CodeScannerError : Swift.Hashable {}
extension VisionSDK.CodeScannerError : Swift.RawRepresentable {}
extension VisionSDK.CodeScannerMode : Swift.Equatable {}
extension VisionSDK.CodeScannerMode : Swift.Hashable {}
extension VisionSDK.CodeScannerMode : Swift.RawRepresentable {}
extension VisionSDK.OCRMode : Swift.Equatable {}
extension VisionSDK.OCRMode : Swift.Hashable {}
extension VisionSDK.OCRMode : Swift.RawRepresentable {}
extension VisionSDK.CaptureType : Swift.Equatable {}
extension VisionSDK.CaptureType : Swift.Hashable {}
extension VisionSDK.CaptureType : Swift.RawRepresentable {}
extension VisionSDK.CaptureMode : Swift.Equatable {}
extension VisionSDK.CaptureMode : Swift.Hashable {}
extension VisionSDK.CaptureMode : Swift.RawRepresentable {}
extension VisionSDK.AppEnvironment : Swift.Equatable {}
extension VisionSDK.AppEnvironment : Swift.Hashable {}
extension VisionSDK.AppEnvironment : Swift.RawRepresentable {}
